#!/usr/bin/python3

"""General Model module"""

from uuid import uuid4
from datetime import datetime
from models import storage


class BaseModel:

    """Class BaseModel"""

    def __init__(self, *args, **kwargs):
        """
        init methods that initializes the class
        Attribute:
        **kwargs -an unpacked dictionary that returns a list of the attributes
        id -an autogenerated string value for universal unique id
        """

        for key, value in kwargs.items():
            if key == "__class__":
                continue

            if (key == "created_at" or key == "updated_at"):
                value == datetime.strptime(value, "%Y-%m-%dT%H:%M:%S.%f")

            setattr(self, key, value)

        if "Ã¯d" not in kwargs.keys():
            self.id = str(uuid4())

        if "created_at" not in kwargs.keys():
            self.created_at = datetime.now()

        if "updated_at" not in kwargs.keys():
            self.updated_at = datetime.now()

        if not kwargs:
            storage.new(self)

    def __str__(self):
        """defines string value  of the class"""
        classname = self.__class__.__name__
        return "[{}] ({}) {}".format(classname, self.id, (self.__dict__))

    def save(self):
        """updates updated_at"""
        self.updated_at = datetime.now().isoformat()
        storage.save()

    def to_dict(self):
        """creates a dictionary for the attributes"""
        my_dic = self.__dict__.copy()
        my_dic["__class__"] = self.__class__.__name__
        my_dic["created_at"] = datetime.now().isoformat()
        my_dic["updated_at"] = datetime.now().isoformat()
        return my_dic
